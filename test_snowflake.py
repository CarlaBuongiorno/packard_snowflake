import pytest

from snowflake import snowflake, check_one_touches_one


def test_snowflake_exists():
    assert snowflake


def test_snowflake_0_generations_empty_grid():
    assert snowflake(0) == []


def test_snowflake_1_generation_1_square():
    assert snowflake(1) == [[1]]


def test_snowflake_2_generations_3_x_3():
    assert snowflake(2) ==  [
                                [0, 1, 0],
                                [1, 1, 1],
                                [0, 1, 0],
                            ]



@pytest.mark.parametrize('grid, y, x, expected', [
            ([[1]], 0, 0, True),
            ([[0, 0, 0], 
              [0, 1, 0], 
              [0, 0, 0]],
              0, 0,
             False),
            ([[0, 0, 0], 
              [0, 1, 0], 
              [0, 0, 0]],
              0, 1,
             True),
            ([[0, 0, 0], 
              [0, 1, 0], 
              [0, 0, 0]],
              0, 2,
             False),
            ([[0, 0, 0], 
              [0, 1, 0], 
              [0, 0, 0]],
              1, 0,
             True),
            ([[0, 0, 0], 
              [0, 1, 0], 
              [0, 0, 0]],
              1, 2,
             True),
            ([[0, 0, 0], 
              [0, 1, 0], 
              [0, 0, 0]],
              2, 0,
             False),
            ([[0, 0, 0], 
              [0, 1, 0], 
              [0, 0, 0]],
              2, 1,
             True),
            ([[0, 0, 0], 
              [0, 1, 0], 
              [0, 0, 0]],
              2, 2,
             False),
            ([[0, 1, 0], 
              [0, 1, 0], 
              [0, 0, 0]],
              0, 2,
             True),
            ([[0, 0, 0, 0, 0],
              [0, 0, 1, 0, 0],
              [0, 1, 1, 1, 0],
              [0, 0, 1, 0, 0],
              [0, 0, 0, 0, 0]],
              0, 0,
             False),
            ([[0, 0, 0, 0, 0],
              [0, 0, 1, 0, 0],
              [0, 1, 1, 1, 0],
              [0, 0, 1, 0, 0],
              [0, 0, 0, 0, 0]],
              0, 1,
             False),
            ([[0, 0, 0, 0, 0],
              [0, 0, 1, 0, 0],
              [0, 1, 1, 1, 0],
              [0, 0, 1, 0, 0],
              [0, 0, 0, 0, 0]],
              0, 2,
             True),
            ([[0, 0, 0, 0, 0],
              [0, 0, 1, 0, 0],
              [0, 1, 1, 1, 0],
              [0, 0, 1, 0, 0],
              [0, 0, 0, 0, 0]],
              0, 3,
             False),
            ([[0, 0, 0, 0, 0],
              [0, 0, 1, 0, 0],
              [0, 1, 1, 1, 0],
              [0, 0, 1, 0, 0],
              [0, 0, 0, 0, 0]],
              0, 4,
             False),
            ([[0, 0, 0, 0, 0],
              [0, 0, 1, 0, 0],
              [0, 1, 1, 1, 0],
              [0, 0, 1, 0, 0],
              [0, 0, 0, 0, 0]],
              1, 0,
             False),
            ([[0, 0, 0, 0, 0],
              [0, 0, 1, 0, 0],
              [0, 1, 1, 1, 0],
              [0, 0, 1, 0, 0],
              [0, 0, 0, 0, 0]],
              1, 1,
             False),
            ([[0, 0, 0, 0, 0],
              [0, 0, 1, 0, 0],
              [0, 1, 1, 1, 0],
              [0, 0, 1, 0, 0],
              [0, 0, 0, 0, 0]],
              1, 2,
             True),
            ([[0, 0, 0, 0, 0],
              [0, 0, 1, 0, 0],
              [0, 1, 1, 1, 0],
              [0, 0, 1, 0, 0],
              [0, 0, 0, 0, 0]],
              1, 3,
             False),
            ([[0, 0, 0, 0, 0],
              [0, 0, 1, 0, 0],
              [0, 1, 1, 1, 0],
              [0, 0, 1, 0, 0],
              [0, 0, 0, 0, 0]],
              1, 4,
             False),
            ([[0, 0, 0, 0, 0],
              [0, 0, 1, 0, 0],
              [0, 1, 1, 1, 0],
              [0, 0, 1, 0, 0],
              [0, 0, 0, 0, 0]],
              2, 0,
             True),
            ([[0, 0, 0, 0, 0],
              [0, 0, 1, 0, 0],
              [0, 1, 1, 1, 0],
              [0, 0, 1, 0, 0],
              [0, 0, 0, 0, 0]],
              2, 1,
             True),
            ([[0, 0, 0, 0, 0],
              [0, 0, 1, 0, 0],
              [0, 1, 1, 1, 0],
              [0, 0, 1, 0, 0],
              [0, 0, 0, 0, 0]],
              2, 3,
             True),
            ([[0, 0, 0, 0, 0],
              [0, 0, 1, 0, 0],
              [0, 1, 1, 1, 0],
              [0, 0, 1, 0, 0],
              [0, 0, 0, 0, 0]],
              2, 4,
             True),
            ([[0, 0, 0, 0, 0],
              [0, 0, 1, 0, 0],
              [0, 1, 1, 1, 0],
              [0, 0, 1, 0, 0],
              [0, 0, 0, 0, 0]],
              3, 0,
             False),
            ([[0, 0, 0, 0, 0],
              [0, 0, 1, 0, 0],
              [0, 1, 1, 1, 0],
              [0, 0, 1, 0, 0],
              [0, 0, 0, 0, 0]],
              3, 1,
             False),
            ([[0, 0, 0, 0, 0],
              [0, 0, 1, 0, 0],
              [0, 1, 1, 1, 0],
              [0, 0, 1, 0, 0],
              [0, 0, 0, 0, 0]],
              3, 2,
             True),
            ([[0, 0, 0, 0, 0],
              [0, 0, 1, 0, 0],
              [0, 1, 1, 1, 0],
              [0, 0, 1, 0, 0],
              [0, 0, 0, 0, 0]],
              3, 3,
             False),
            ([[0, 0, 0, 0, 0],
              [0, 0, 1, 0, 0],
              [0, 1, 1, 1, 0],
              [0, 0, 1, 0, 0],
              [0, 0, 0, 0, 0]],
              3, 4,
             False),
            ([[0, 0, 0, 0, 0],
              [0, 0, 1, 0, 0],
              [0, 1, 1, 1, 0],
              [0, 0, 1, 0, 0],
              [0, 0, 0, 0, 0]],
              4, 0,
             False),
            ([[0, 0, 0, 0, 0],
              [0, 0, 1, 0, 0],
              [0, 1, 1, 1, 0],
              [0, 0, 1, 0, 0],
              [0, 0, 0, 0, 0]],
              4, 1,
             False),
            ([[0, 0, 0, 0, 0],
              [0, 0, 1, 0, 0],
              [0, 1, 1, 1, 0],
              [0, 0, 1, 0, 0],
              [0, 0, 0, 0, 0]],
              4, 2,
             True),
            ([[0, 0, 0, 0, 0],
              [0, 0, 1, 0, 0],
              [0, 1, 1, 1, 0],
              [0, 0, 1, 0, 0],
              [0, 0, 0, 0, 0]],
              4, 3,
             False),
            ([[0, 0, 0, 0, 0],
              [0, 0, 1, 0, 0],
              [0, 1, 1, 1, 0],
              [0, 0, 1, 0, 0],
              [0, 0, 0, 0, 0]],
              4, 4,
             False),
])
def test_check_one_touches_one(grid, y, x, expected):
    assert check_one_touches_one(grid, y, x) == expected


# def test_snowflake_3_generations_5_x_5():
#     assert snowflake(3) ==  [
#                                 [0, 0, 1, 0, 0],
#                                 [0, 0, 1, 0, 0],
#                                 [1, 1, 1, 1, 1],
#                                 [0, 0, 1, 0, 0],
#                                 [0, 0, 1, 0, 0],
#                             ]


# def test_snowflake_4_generations_7_x_7():
#     assert snowflake(4) ==  [
#                                 [0, 0, 0, 1, 0, 0, 0],
#                                 [0, 0, 1, 1, 1, 0, 0],
#                                 [0, 1, 0, 1, 0, 1, 0],
#                                 [1, 1, 1, 1, 1, 1, 1],
#                                 [0, 1, 0, 1, 0, 1, 0],
#                                 [0, 0, 1, 1, 1, 0, 0],
#                                 [0, 0, 0, 1, 0, 0, 0],
#                             ]


# def test_snowflake_5_generations_9_x_9():
#     assert snowflake(5) ==  [
#                                 [0, 0, 0, 0, 1, 0, 0, 0, 0],
#                                 [0, 0, 0, 0, 1, 0, 0, 0, 0],
#                                 [0, 0, 0, 1, 1, 1, 0, 0, 0],
#                                 [0, 0, 1, 0, 1, 0, 1, 0, 0],
#                                 [1, 1, 1, 1, 1, 1, 1, 1, 1],
#                                 [0, 0, 1, 0, 1, 0, 1, 0, 0],
#                                 [0, 0, 0, 1, 1, 1, 0, 0, 0],
#                                 [0, 0, 0, 0, 1, 0, 0, 0, 0],
#                                 [0, 0, 0, 0, 1, 0, 0, 0, 0],
#                             ]